// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/category.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CQueryRequest struct {
	Id    int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *CQueryRequest) Reset()                    { *m = CQueryRequest{} }
func (m *CQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*CQueryRequest) ProtoMessage()               {}
func (*CQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CQueryRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CQueryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CQueryRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CategoryInfo struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ParentId  int64  `protobuf:"varint,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Sort      int64  `protobuf:"varint,4,opt,name=sort" json:"sort,omitempty"`
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *CategoryInfo) Reset()                    { *m = CategoryInfo{} }
func (m *CategoryInfo) String() string            { return proto.CompactTextString(m) }
func (*CategoryInfo) ProtoMessage()               {}
func (*CategoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CategoryInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CategoryInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CategoryInfo) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CategoryInfo) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CategoryInfo) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CategoryInfo) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type CategoryList struct {
	List []*CategoryInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CategoryList) Reset()                    { *m = CategoryList{} }
func (m *CategoryList) String() string            { return proto.CompactTextString(m) }
func (*CategoryList) ProtoMessage()               {}
func (*CategoryList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CategoryList) GetList() []*CategoryInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*CQueryRequest)(nil), "protos.cQueryRequest")
	proto.RegisterType((*CategoryInfo)(nil), "protos.categoryInfo")
	proto.RegisterType((*CategoryList)(nil), "protos.categoryList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Category service

type CategoryClient interface {
	GetCategoryInfo(ctx context.Context, in *CQueryRequest, opts ...grpc.CallOption) (*CategoryInfo, error)
	GetCategoryList(ctx context.Context, in *CQueryRequest, opts ...grpc.CallOption) (*CategoryList, error)
}

type categoryClient struct {
	cc *grpc.ClientConn
}

func NewCategoryClient(cc *grpc.ClientConn) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) GetCategoryInfo(ctx context.Context, in *CQueryRequest, opts ...grpc.CallOption) (*CategoryInfo, error) {
	out := new(CategoryInfo)
	err := grpc.Invoke(ctx, "/protos.Category/GetCategoryInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetCategoryList(ctx context.Context, in *CQueryRequest, opts ...grpc.CallOption) (*CategoryList, error) {
	out := new(CategoryList)
	err := grpc.Invoke(ctx, "/protos.Category/GetCategoryList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryServer interface {
	GetCategoryInfo(context.Context, *CQueryRequest) (*CategoryInfo, error)
	GetCategoryList(context.Context, *CQueryRequest) (*CategoryList, error)
}

func RegisterCategoryServer(s *grpc.Server, srv CategoryServer) {
	s.RegisterService(&_Category_serviceDesc, srv)
}

func _Category_GetCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Category/GetCategoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategoryInfo(ctx, req.(*CQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Category/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategoryList(ctx, req.(*CQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Category_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryInfo",
			Handler:    _Category_GetCategoryInfo_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _Category_GetCategoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/category.proto",
}

func init() { proto.RegisterFile("protos/category.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0x9b, 0x9f, 0x96, 0x66, 0xfc, 0x83, 0xa5, 0x85, 0x45, 0x11, 0xca, 0x9e, 0x72, 0xaa,
	0x50, 0x2f, 0x1e, 0x2d, 0x3d, 0x48, 0xc0, 0x8b, 0x79, 0x81, 0xb2, 0x66, 0xc7, 0xb2, 0x10, 0xbb,
	0x71, 0x77, 0x72, 0xe8, 0x4b, 0xf8, 0x12, 0xbe, 0xa8, 0x64, 0x37, 0xd5, 0x20, 0x3d, 0x78, 0xdb,
	0xf9, 0x66, 0xf2, 0xcd, 0x4f, 0x60, 0xde, 0x58, 0x43, 0xc6, 0xdd, 0x55, 0x92, 0x70, 0x67, 0xec,
	0x61, 0xe9, 0x63, 0x36, 0x09, 0x58, 0x14, 0x70, 0x51, 0xbd, 0xb4, 0x68, 0x0f, 0x25, 0x7e, 0xb4,
	0xe8, 0x88, 0x5d, 0x42, 0xac, 0x15, 0x8f, 0x16, 0x51, 0x9e, 0x94, 0xb1, 0x56, 0x6c, 0x06, 0xe3,
	0x5a, 0xbf, 0x6b, 0xe2, 0xb1, 0x47, 0x21, 0x60, 0x0c, 0xd2, 0x46, 0xee, 0x90, 0x27, 0x1e, 0xfa,
	0xb7, 0xf8, 0x8a, 0xe0, 0xfc, 0xd8, 0xa5, 0xd8, 0xbf, 0x99, 0x53, 0x2a, 0xd2, 0x54, 0xa3, 0x57,
	0x65, 0x65, 0x08, 0xd8, 0x0d, 0x64, 0x8d, 0xb4, 0xb8, 0xa7, 0xad, 0x56, 0xbd, 0x6f, 0x1a, 0x40,
	0xa1, 0xba, 0x3e, 0xce, 0x58, 0xe2, 0x69, 0xe8, 0xd3, 0xbd, 0xd9, 0x2d, 0x40, 0x65, 0x51, 0x12,
	0xaa, 0xad, 0x24, 0x3e, 0xf6, 0xae, 0xac, 0x27, 0x6b, 0x9f, 0x6e, 0x1b, 0x75, 0x4c, 0x4f, 0x42,
	0xba, 0x27, 0x6b, 0x12, 0x0f, 0xbf, 0x43, 0x3e, 0x6b, 0x47, 0x2c, 0x87, 0xb4, 0xd6, 0x8e, 0x78,
	0xb4, 0x48, 0xf2, 0xb3, 0xd5, 0x2c, 0x9c, 0xc7, 0x2d, 0x87, 0x8b, 0x94, 0xbe, 0x62, 0xf5, 0x19,
	0xc1, 0x74, 0xd3, 0x63, 0xf6, 0x08, 0x57, 0x4f, 0x48, 0x9b, 0xe1, 0xba, 0xf3, 0x9f, 0x6f, 0x87,
	0x07, 0xbd, 0x3e, 0xa9, 0x14, 0xa3, 0x3f, 0x06, 0x3f, 0xcb, 0x7f, 0x0d, 0x5d, 0xb1, 0x18, 0xbd,
	0x86, 0x7f, 0x78, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xac, 0xbb, 0xad, 0xe3, 0x01, 0x00,
	0x00,
}
